// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package messenger

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson74542c9fDecodeGithubComPsidexMessengerStatsInternalMessenger(in *jlexer.Lexer, out *Message) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "sender_name":
			out.SenderName = string(in.String())
		case "timestamp_ms":
			out.TimestampMs = int64(in.Int64())
		case "content":
			out.Content = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson74542c9fEncodeGithubComPsidexMessengerStatsInternalMessenger(out *jwriter.Writer, in Message) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"sender_name\":"
		out.RawString(prefix[1:])
		out.String(string(in.SenderName))
	}
	{
		const prefix string = ",\"timestamp_ms\":"
		out.RawString(prefix)
		out.Int64(int64(in.TimestampMs))
	}
	if in.Content != "" {
		const prefix string = ",\"content\":"
		out.RawString(prefix)
		out.String(string(in.Content))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Message) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson74542c9fEncodeGithubComPsidexMessengerStatsInternalMessenger(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Message) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson74542c9fEncodeGithubComPsidexMessengerStatsInternalMessenger(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Message) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson74542c9fDecodeGithubComPsidexMessengerStatsInternalMessenger(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Message) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson74542c9fDecodeGithubComPsidexMessengerStatsInternalMessenger(l, v)
}
func easyjson74542c9fDecodeGithubComPsidexMessengerStatsInternalMessenger1(in *jlexer.Lexer, out *Conversation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "messages":
			if in.IsNull() {
				in.Skip()
				out.Messages = nil
			} else {
				in.Delim('[')
				if out.Messages == nil {
					if !in.IsDelim(']') {
						out.Messages = make([]Message, 0, 1)
					} else {
						out.Messages = []Message{}
					}
				} else {
					out.Messages = (out.Messages)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Message
					(v1).UnmarshalEasyJSON(in)
					out.Messages = append(out.Messages, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "title":
			out.Title = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson74542c9fEncodeGithubComPsidexMessengerStatsInternalMessenger1(out *jwriter.Writer, in Conversation) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"messages\":"
		out.RawString(prefix[1:])
		if in.Messages == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Messages {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Conversation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson74542c9fEncodeGithubComPsidexMessengerStatsInternalMessenger1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Conversation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson74542c9fEncodeGithubComPsidexMessengerStatsInternalMessenger1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Conversation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson74542c9fDecodeGithubComPsidexMessengerStatsInternalMessenger1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Conversation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson74542c9fDecodeGithubComPsidexMessengerStatsInternalMessenger1(l, v)
}
